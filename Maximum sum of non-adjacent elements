#include <bits/stdc++.h> 
int solve(vector<int> &nums,vector<int> &dp,int n){
        if(dp[n]!=-1) return dp[n];
        if(n<0) return 0;
        if(n==0) return nums[n];


        dp[n] = max(nums[n]+solve(nums,dp,n-2), 0 +solve(nums,dp,n-1));
        return dp[n];
    
}
//tabular(bottomup approach)
int solve2(vector<int> &nums,int n){
  vector<int>dp(n+5,0);
  dp[0] = nums[0];
  int ans;
  for(int i=1;i<n;i++){
      int inc = nums[i]+dp[i-2];
      int exc = 0 + dp[i-1];
      dp[i] = max(inc,exc);
  }
  return dp[n-1];
}
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    vector<int>dp(nums.size()+5,-1);
  
    int ans= solve(nums,dp,nums.size()-1);
    return ans;
}
https://www.codingninjas.com/codestudio/problems/maximum-sum-of-non-adjacent-elements_843261
