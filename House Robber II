#include <bits/stdc++.h> 

long long int solve(vector<int> &num,vector<long long int> &dp,int n){
   if(n<0) return 0;
   if(dp[n]!=-1) return dp[n];
   if(n==0) return num[0];

   dp[n] = max(num[n]+solve(num,dp,n-2), 0+ solve(num,dp,n-1));
   return dp[n];
}

long long int houseRobber(vector<int>&valueInHouse)
{
    // Write your code here.
    int s = valueInHouse.size();
     if(s==1) return valueInHouse[0];
    vector<long long int>dp(s+5,-1);
     vector<int>first,second;
    for(int i=0;i<valueInHouse.size();i++){
        if(i!=0) first.push_back(valueInHouse[i]); 
        if(i!=valueInHouse.size()-1) second.push_back(valueInHouse[i]); 
    }
    long long int ans = solve(first,dp,first.size()-1);
    std::fill(dp.begin(), dp.end(), -1);
     long long int ans2= solve(second,dp,second.size()-1);
    return max(ans,ans2);
}
