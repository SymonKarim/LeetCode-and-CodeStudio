//topdown
class Solution {
public:
  
    int solve(vector<int>& cost, vector<int>& dp,int n){
        if(dp[n]!=0) return dp[n];
        if(n ==0) return cost[0];
        else if(n ==1) return cost[1];
        
        dp[n] =cost[n] + min(solve(cost,dp, n-1), solve(cost,dp,n-2));
        return dp[n];
    }
    int minCostClimbingStairs(vector<int>& cost) {
       vector<int>dp(1005,0);
       int n = cost.size();
      int ans = min(solve(cost,dp, n-1),solve(cost,dp, n-2));
      return ans;
    }
};
//botto-up
class Solution {
public:
  
    int solve(vector<int>& cost,int n){
         vector<int>dp(1005,-1);
         dp[0] = cost[0],dp[1] = cost[1];

       for(int i=2;i<n;i++){
           dp[i]= cost[i]+min(dp[i-1],dp[i-2]);
       }
       return min(dp[n-1],dp[n-2]);
    }
    int minCostClimbingStairs(vector<int>& cost) {
     
       int n = cost.size();
       return solve(cost,n);
    }
};
