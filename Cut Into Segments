#include<limits.h>
int solve(int n,int x,int y,int z,vector<int>&dp){
	if(n==0) return 0;
	if(n<0) return INT_MIN;
    if(dp[n]!=INT_MIN) return dp[n];
	int a = solve(n-x,x,y,z,dp)+1;
	int b= solve(n-y,x,y,z,dp)+1;
	int c = solve(n-z,x,y,z,dp)+1;
	
	dp[n] = max(a,max(b,c));

}
int solveTabular(int n,int x,int y,int z,vector<int>&dp){
	dp[0] = 0;

	for(int i=1;i<=n;i++){
            if(i-x>=0) dp[i] = max(dp[i],1+dp[i-x]);
			if(i-y>=0) dp[i] = max(dp[i],1+dp[i-y]);
			if(i-z>=0) dp[i] = max(dp[i],1+dp[i-z]);
	}
	return dp[n]<0? 0 : dp[n];
}
int cutSegments(int n, int x, int y, int z) {
  vector<int>dp(n+5,INT_MIN);
  int ans = solveTabular(n,x,y,z,dp);
  if(ans<0) return 0;
  return ans;
}
