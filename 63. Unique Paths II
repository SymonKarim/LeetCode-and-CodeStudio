class Solution {
public:
  int solve(vector<vector<int>> &dp,vector<vector<int>>& obstacleGrid, int i, int j, int const m, int const n){
       if(i==m-1 and j==n-1) return 1;
       if(i>=m or j>=n) return 0;
       if(obstacleGrid[i][j]) return 0;
       if(dp[i][j]!=-1) return dp[i][j];
        int right = solve(dp,obstacleGrid, i,j+1, m, n);
        int down = solve(dp,obstacleGrid, i+1, j, m , n);
        return dp[i][j] = right+down;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
         int m = obstacleGrid.size(), n = obstacleGrid[0].size(); 
         if(obstacleGrid[m-1][n-1]) return 0;
         vector<vector<int>>dp(m+1,vector<int>(n+1, -1));
         return solve(dp,obstacleGrid, 0,0,m,n);
    }
};
